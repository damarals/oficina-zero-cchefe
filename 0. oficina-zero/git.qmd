---
format: 
  revealjs:
    width: 1280
    height: 720
    slide-number: c/t
    theme: assets/style.scss
center: true
---

## Oficina Zero {.title-slide}

Introdu√ß√£o ao Git

## Problemas no Desenvolvimento Colaborativo

- Compartilhamento de C√≥digo Dif√≠cil
- Vers√µes de C√≥digo Desatualizadas e Confusas
- Conflitos e Perda de Trabalho
- Zero Hist√≥rico e Controle

## O que √© Git?

- **Git** √© um sistema de controle de vers√£o distribu√≠do.
- Criado por Linus Torvalds em 2005.
- Projetado para ser r√°pido, simples e suportar desenvolvimento distribu√≠do.

## Vantagens do Git

1. Versionamento de Arquivos
2. Colabora√ß√£o
3. Distribui√ß√£o

## Configura√ß√£o do Git {.chapter-slide}

## Instala√ß√£o do Git

- Linux: 

    ```bash
    sudo apt-get install git
    ```
- Mac:

    ```bash
    brew install git
    ```
- Windows: **Usar WSL**... e a√≠ cai no Linux üí™

## Configura√ß√£o Inicial

1. Configurar Nome e Email:

    ```bash
    git config --global user.name "Seu Nome"
    git config --global user.email "seu.email@exemplo.com"
    ```
2. Arquivos de Configura√ß√£o:
    - Global: `~/.gitconfig`
    - Local: `.git/config`

## *Deep Dive* üåä {.chapter-slide}

## Conceitos B√°sicos

- **Reposit√≥rio**: Conjunto de arquivos e seu hist√≥rico de vers√µes
- **Commit**: Grupo de altera√ß√µes salvas em um determinado momento
- **Branch**: Linha independente de desenvolvimento
- **Merge**: Combina√ß√£o de altera√ß√µes de diferentes branches

## Fluxo de Trabalho Git

Veja o diagrama abaixo para entender o fluxo t√≠pico de trabalho com o Git:

```{mermaid}
flowchart LR;
    A(Diret√≥rio de Trabalho) --> |"git add"| B(√Årea de Prepara√ß√£o);
    B --> |"git commit"| C(Commit);
    C --> |"Armazenado em"| D(Reposit√≥rio Git Local);

    subgraph M√°quina Local
        A
        B
        C
        D
    end

    D --> |"git push"| E(Reposit√≥rio Remoto);
```

## Comandos B√°sicos

1. Criar e Inicializar Reposit√≥rio:

    ```bash
    mkdir projeto-git
    cd projeto-git
    git init
    ```

2. Adicionar Arquivo:

    ```bash
    touch README.md
    git add README.md
    git commit -m "docs: add README"
    ```

## Branches

- Linhas independentes de desenvolvimento
- Permitem trabalhar em funcionalidades isoladas
- Facilitam experimentos sem afetar o c√≥digo principal
- Criar Branch:

    ```bash
    git branch nova-feature
    ```
- Trocar para Branch:

    ```bash
    git checkout nova-feature
    ```

## Mesclagem (Merge)

- Combina mudan√ßas de diferentes branches
- Integra novas funcionalidades ao c√≥digo principal
- Pode requerer resolu√ß√£o de conflitos

## Reposit√≥rios Remotos {.chapter-slide}

Github e Gitlab

## Vantagens

- Permitem colabora√ß√£o entre equipes
- Servem como **backup em nuvem** do seu c√≥digo
- Exemplos: GitHub e GitLab

## Configura√ß√£o do GitHub e GitLab

Hoje (2024), podemos interagir com a API do github/gitlab via:

1. SSH

    - Gerar chave SSH:
    
    ```bash
    ssh-keygen -t ed25519 -C "seu.email@exemplo.com"
    ```

    - Adicionar chave √† sua conta GitHub/GitLab

2. Access Token

    - Gerar token nas configura√ß√µes da conta
    - Usar como senha ao clonar via HTTPS

## GitLab: Solu√ß√£o Empresarial

- Hospedagem de c√≥digo privativo
- Implanta√ß√£o na infraestrutura pr√≥pria
- CI/CD integrado
- Gerenciamento de projetos avan√ßado

## Clonando um Reposit√≥rio

```bash
git clone https://github.com/usuario/repo.git
cd repo
```

## Arquivo `.gitignore`

Ignorar Arquivos "Tempor√°rios":

```plaintext
*.log
node_modules/
.env
```

## Import√¢ncia do `README.md`

- Documenta√ß√£o Essencial:
- Descri√ß√£o do projeto.
- Instru√ß√µes de instala√ß√£o e uso.
- Como contribuir.

## Obrigado! {.thanks-slide}

Perguntas?